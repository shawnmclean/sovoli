import type { Metadata } from "next";
import { Card, CardBody } from "@sovoli/ui/components/card";
import { Link } from "@sovoli/ui/components/link";
import { SearchIcon, ArrowLeftIcon } from "lucide-react";
import { Button } from "@sovoli/ui/components/button";

import { pluralize } from "~/utils/pluralize";
import { DirectoryViewTabs } from "../../components/DirectoryViewTabs";
import { bus } from "~/services/core/bus";
import { GetAllCategoryAddressesQuery } from "~/modules/organisations/services/queries/GetAllCategoryAddresses";
import { GetOrgsByCategoryAndLocationQuery } from "~/modules/organisations/services/queries/GetOrgsByCategoryAndLocation";
import { OrgListItem } from "../../components/OrgListItem";
import { Chip } from "@sovoli/ui/components/chip";

import { countryCodeToName, countryNameToCode } from "~/utils/countryUtils";

const CATEGORY_MAP: Record<string, string> = {
  "private-school": "Private School",
  "nursery-school": "Nursery School",
  "secondary-school": "Secondary School",
  "pre-school": "Pre-School",
};

interface Props {
  params: Promise<{ category: string; locations: string[] }>;
  searchParams: Promise<{
    page: string | undefined;
    pageSize: string | undefined;
  }>;
}

export async function generateStaticParams() {
  const paths: { category: string; locations: string[] }[] = [];

  const categoryAddresses = await bus.queryProcessor.execute(
    new GetAllCategoryAddressesQuery(),
  );

  // Params should be generated by /category/country or /category/country/state or /category/country/city
  // so the third path is either city or state
  for (const categoryAddress of categoryAddresses.categoryAddresses) {
    const country = countryCodeToName(categoryAddress.address.countryCode);
    if (!country) continue;

    paths.push({
      category: categoryAddress.category,
      locations: [country],
    });
    if (categoryAddress.address.state) {
      paths.push({
        category: categoryAddress.category,
        locations: [country, categoryAddress.address.state],
      });
    }
    if (categoryAddress.address.city) {
      paths.push({
        category: categoryAddress.category,
        locations: [country, categoryAddress.address.city],
      });
    }
  }

  return paths;
}

const retreiveOrgsByCategoryAndLocation = async (
  category: string,
  country?: string,
  stateOrCity?: string,
  page = 1,
  pageSize = 20,
) => {
  const countryCode = countryNameToCode(country ?? "");

  const result = await bus.queryProcessor.execute(
    new GetOrgsByCategoryAndLocationQuery({
      category,
      countryCode,
      stateOrCity,
      page,
      pageSize,
    }),
  );
  return result;
};

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const { category, locations } = await params;
  const readableCategory = CATEGORY_MAP[category] ?? category;
  const formattedLocations = locations
    .map((loc) => loc.charAt(0).toUpperCase() + loc.slice(1))
    .join(", ");
  return {
    title: `Top ${pluralize(2, readableCategory)} in ${formattedLocations}`,
    description: `Explore the best ${pluralize(2, readableCategory)} in ${formattedLocations}.`,
  };
}

export default async function DirectoryCategoryPage(props: Props) {
  const { category, locations } = await props.params;
  const searchParams = await props.searchParams;

  const page = parseInt(searchParams.page ?? "1");
  const pageSize = parseInt(searchParams.pageSize ?? "20");

  const country = locations[0];
  const stateOrCity = locations[1];

  const { orgs, total } = await retreiveOrgsByCategoryAndLocation(
    category,
    country,
    stateOrCity,
    page,
    pageSize,
  );
  const readableCategory = CATEGORY_MAP[category] ?? category;
  const formattedLocations = locations
    .map((loc) => loc.charAt(0).toUpperCase() + loc.slice(1))
    .join(", ");

  const totalPages = Math.ceil(total / pageSize);

  return (
    <div className="mx-auto max-w-5xl px-4 sm:px-6">
      {/* Back Button - only show if there's a second location */}
      {locations.length > 1 && (
        <div className="mb-4">
          <Button
            as={Link}
            href={`/d/${category}/${locations[0]}`}
            variant="light"
            startContent={<ArrowLeftIcon className="w-4 h-4" />}
            size="sm"
          >
            Back
          </Button>
        </div>
      )}

      <div className="mb-4">
        <div className="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">
          <div>
            <div className="flex flex-wrap items-center gap-2 mb-1">
              <h1 className="text-2xl font-semibold leading-tight">
                Top {pluralize(2, readableCategory)} in {formattedLocations}
              </h1>
            </div>

            <p className="max-w-2xl text-default-500 sr-only">
              Browse programs, compare schools, and apply â€” all through one
              trusted platform.
            </p>
          </div>
        </div>
        <div className="mt-4 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Chip color="warning" size="sm" className="mt-0.5">
              Beta
            </Chip>
            <span className="text-default-500">{`${total} results`}</span>
          </div>
          <DirectoryViewTabs />
        </div>
      </div>
      {total === 0 ? (
        <Card>
          <CardBody className="flex flex-col items-center justify-center py-12">
            <SearchIcon className="mb-4 h-12 w-12 text-default-400" />
            <p className="text-lg text-default-600">No organizations found.</p>
            <p className="mt-2 max-w-md text-center text-default-500">
              We couldn't find any {readableCategory.toLowerCase()} in{" "}
              {formattedLocations}. Try expanding your search to other
              locations.
            </p>
          </CardBody>
        </Card>
      ) : (
        <>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            {orgs.map((orgInstance) => (
              <OrgListItem
                key={orgInstance.org.username}
                orgInstance={orgInstance}
              />
            ))}
          </div>
          {totalPages > 1 && (
            <div className="mt-8 flex justify-center">
              <nav className="flex items-center gap-2" aria-label="Pagination">
                {Array.from({ length: totalPages }, (_, i) => {
                  const pageNum = i + 1;
                  const isActive = pageNum === page;
                  const href = `?page=${pageNum}&pageSize=${pageSize}`;
                  return (
                    <Link
                      key={pageNum}
                      href={href}
                      aria-current={isActive ? "page" : undefined}
                      className={`px-3 py-1 rounded-md border text-sm font-medium ${
                        isActive
                          ? "bg-primary-600 text-white border-primary-600"
                          : "bg-white text-default-700 border-default-200 hover:bg-default-100"
                      }`}
                    >
                      {pageNum}
                    </Link>
                  );
                })}
              </nav>
            </div>
          )}
        </>
      )}
    </div>
  );
}
