import type { Metadata } from "next";
import { Card, CardBody, CardFooter } from "@sovoli/ui/components/card";
import { Button } from "@sovoli/ui/components/button";
import { Link } from "@sovoli/ui/components/link";
import { MapPinIcon, SearchIcon } from "lucide-react";
import { SiWhatsapp } from "@icons-pack/react-simple-icons";

import { pluralize } from "~/utils/pluralize";
import { DirectoryViewTabs } from "./DirectoryViewTabs";
import { ApplyDialogButton } from "~/app/(directory)/components/ApplyDialogButton";
import { bus } from "~/services/core/bus";
import { GetAllCategoryAddressesQuery } from "~/modules/organisations/services/queries/GetAllCategoryAddresses";
import { GetOrgsByCategoryAndLocationQuery } from "~/modules/organisations/services/queries/GetOrgsByCategoryAndLocation";
import type { Address, OrgInstance } from "~/modules/organisations/types";

const CATEGORY_MAP: Record<string, string> = {
  "private-school": "Private School",
  "nursery-school": "Nursery School",
  "secondary-school": "Secondary School",
  "pre-school": "Pre-School",
};

interface Props {
  params: Promise<{ category: string; locations: string[] }>;
  searchParams: { page?: string; pageSize?: string };
}

export async function generateStaticParams() {
  const paths: { category: string; locations: string[] }[] = [];

  const categoryAddresses = await bus.queryProcessor.execute(
    new GetAllCategoryAddressesQuery(),
  );

  // Params should be generated by /category/country or /category/country/state or /category/country/city
  // so the third path is either city or state
  for (const categoryAddress of categoryAddresses.categoryAddresses) {
    paths.push({
      category: categoryAddress.category,
      locations: [categoryAddress.address.country],
    });
    if (categoryAddress.address.state) {
      paths.push({
        category: categoryAddress.category,
        locations: [
          categoryAddress.address.country,
          categoryAddress.address.state,
        ],
      });
    }
    if (categoryAddress.address.city) {
      paths.push({
        category: categoryAddress.category,
        locations: [
          categoryAddress.address.country,
          categoryAddress.address.city,
        ],
      });
    }
  }

  return paths;
}

const retreiveOrgsByCategoryAndLocation = async (
  category: string,
  country?: string,
  stateOrCity?: string,
  page = 1,
  pageSize = 30,
) => {
  const result = await bus.queryProcessor.execute(
    new GetOrgsByCategoryAndLocationQuery({
      category,
      country,
      stateOrCity,
      page,
      pageSize,
    }),
  );
  return result;
};

export async function generateMetadata({ params }: Props): Promise<Metadata> {
  const { category, locations } = await params;
  const readableCategory = CATEGORY_MAP[category] ?? category;
  const formattedLocations = locations
    .map((loc) => loc.charAt(0).toUpperCase() + loc.slice(1))
    .join(", ");
  return {
    title: `Top ${pluralize(2, readableCategory)} in ${formattedLocations}`,
    description: `Explore the best ${pluralize(2, readableCategory)} in ${formattedLocations}.`,
  };
}

interface Props {
  params: Promise<{ category: string; locations: string[] }>;
  searchParams: Promise<{
    page: string | undefined;
    pageSize: string | undefined;
  }>;
}

export default async function DirectoryCategoryPage(props: Props) {
  const { category, locations } = await props.params;
  const searchParams = await props.searchParams;

  const page = parseInt(searchParams.page ?? "1");
  const pageSize = parseInt(searchParams.pageSize ?? "30");

  const country = locations[0];
  const stateOrCity = locations[1];

  const { orgs, total } = await retreiveOrgsByCategoryAndLocation(
    category,
    country,
    stateOrCity,
    page,
    pageSize,
  );
  const readableCategory = CATEGORY_MAP[category] ?? category;
  const formattedLocations = locations
    .map((loc) => loc.charAt(0).toUpperCase() + loc.slice(1))
    .join(", ");

  const totalPages = Math.ceil(total / pageSize);

  return (
    <div className="mx-auto max-w-5xl px-4 py-8 sm:px-6">
      <div className="mb-8">
        <div className="flex flex-col gap-4 sm:flex-row sm:items-start sm:justify-between">
          <div>
            <h1 className="mb-2 text-3xl font-semibold">
              Top {pluralize(2, readableCategory)} in {formattedLocations}
            </h1>
            <p className="mb-6 max-w-2xl text-default-500">
              We're building Guyana's most trusted school directory. View
              details, compare offerings, and soon, apply directly.
            </p>
            <p className="text-default-500">
              Found {total} {pluralize(total, "organization")}
            </p>
          </div>
          <Button
            as="a"
            href="https://wa.me/5926082743"
            target="_blank"
            rel="noopener noreferrer"
            color="success"
            className="flex w-full items-center justify-center gap-2 sm:w-auto"
          >
            <SiWhatsapp className="h-5 w-5" />
            Suggest a School
          </Button>
        </div>
        <div className="mt-4">
          <DirectoryViewTabs />
        </div>
      </div>

      {total === 0 ? (
        <Card>
          <CardBody className="flex flex-col items-center justify-center py-12">
            <SearchIcon className="mb-4 h-12 w-12 text-default-400" />
            <p className="text-lg text-default-600">No organizations found.</p>
            <p className="mt-2 max-w-md text-center text-default-500">
              We couldn't find any {readableCategory.toLowerCase()} in{" "}
              {formattedLocations}. Try expanding your search to other
              locations.
            </p>
          </CardBody>
        </Card>
      ) : (
        <>
          <div className="grid grid-cols-1 gap-4 md:grid-cols-2">
            {orgs.map((org) => (
              <OrganizationCard key={org.org.username} org={org} />
            ))}
          </div>
          {totalPages > 1 && (
            <div className="mt-8 flex justify-center">
              <nav className="flex items-center gap-2" aria-label="Pagination">
                {Array.from({ length: totalPages }, (_, i) => {
                  const pageNum = i + 1;
                  const isActive = pageNum === page;
                  const href = `?page=${pageNum}&pageSize=${pageSize}`;
                  return (
                    <Link
                      key={pageNum}
                      href={href}
                      aria-current={isActive ? "page" : undefined}
                      className={`px-3 py-1 rounded-md border text-sm font-medium ${
                        isActive
                          ? "bg-primary-600 text-white border-primary-600"
                          : "bg-white text-default-700 border-default-200 hover:bg-default-100"
                      }`}
                    >
                      {pageNum}
                    </Link>
                  );
                })}
              </nav>
            </div>
          )}
        </>
      )}
    </div>
  );
}

function formatAddress(address: Address): string {
  const parts = [];
  if (address.city) parts.push(address.city);
  if (address.state) parts.push(address.state);
  parts.push(address.country);

  return parts
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join(", ");
}

function OrganizationCard({ org }: { org: OrgInstance }) {
  return (
    <Card className="overflow-visible">
      <CardBody>
        <div className="flex flex-col gap-3">
          <div className="flex items-start justify-between">
            <Link href={`/orgs/${org.org.username}`}>
              <h2 className="text-xl font-semibold">{org.org.name}</h2>
            </Link>
          </div>

          <div className="mt-1 flex flex-col gap-2">
            {org.org.locations[0]?.address && (
              <div className="flex items-center gap-2 text-default-500">
                <MapPinIcon className="h-4 w-4" />
                <span>{formatAddress(org.org.locations[0]?.address)}</span>
              </div>
            )}
          </div>
        </div>
      </CardBody>
      <CardFooter>
        <ApplyDialogButton orgName={org.org.name} />
      </CardFooter>
    </Card>
  );
}
